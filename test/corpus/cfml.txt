===================================
cfif
===================================
<cfif z EQ b>test</cfif>
---

(fragment
      (cf_tag
        (cf_ifstatement
          (cf_if
            (cf_if_keyword)
            (cf_variable)
            (cf_operator)
            (cf_variable)
            (cf_tag_end)
            (text))
          (cf_if_end
            (cf_tag_close)
            (cf_if_keyword)))))

===================================
cfif with else
===================================
<cfif z EQ b>Yes<cfelse>Noo</cfif>
---
(fragment
      (cf_tag
        (cf_ifstatement
          (cf_if
            (cf_if_keyword)
            (cf_variable)
            (cf_operator)
            (cf_variable)
            (cf_tag_end)
            (text))
          (cf_else
            (cf_else_keyword)
            (cf_tag_end)
            (text))
          (cf_if_end
            (cf_tag_close)
            (cf_if_keyword)))))

===================================
cfif with elseif
===================================
<cfif z EQ b>Yes<cfelseif z EQ b>No</cfif>
---

(fragment
      (cf_tag
        (cf_ifstatement
          (cf_if
            (cf_if_keyword)
            (cf_variable)
            (cf_operator)
            (cf_variable)
            (cf_tag_end)
            (text))
          (cf_elseif
            (cf_elseif_keyword)
            (cf_condition)
            (cf_tag_end)
            (text))
          (cf_if_end
            (cf_tag_close)
            (cf_if_keyword)))))


===================================
cfif with elseif and else
===================================
<cfif z EQ b>Yes<cfelseif z EQ b>No<cfelse>No</cfif>
---

(fragment
      (cf_tag
        (cf_ifstatement
          (cf_if
            (cf_if_keyword)
            (cf_variable)
            (cf_operator)
            (cf_variable)
            (cf_tag_end)
            (text))
          (cf_elseif
            (cf_elseif_keyword)
            (cf_condition)
            (cf_tag_end)
            (text))
          (cf_else
            (cf_else_keyword)
            (cf_tag_end)
            (text))
          (cf_if_end
            (cf_tag_close)
            (cf_if_keyword)))))

===================================
cffunction
===================================

<cffunction name="Test">

    #testAND AND ANDtestOR#

    #test AND test#

    <cfset test = "test">

    <cfif test.test EQ test>

    </cfif>

    <cfset test = test[test]>
    <cfset test = test(test).test>
    <cfset test = test(test)[test]>

</cffunction>

---

(fragment
      (cf_tag
        (cf_function_tag
          (cf_function_keyword)
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (cf_variable)))
          (cf_tag_end)
          (cf_hash
            (cf_variable)
            (cf_operator)
            (cf_variable))
          (cf_hash
            (cf_variable)
            (cf_operator)
            (cf_variable))
          (cf_tag
            (cf_set
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (cf_variable))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_ifstatement
              (cf_if
                (cf_if_keyword)
                (cf_variable)
                (cf_period)
                (cf_variable)
                (cf_operator)
                (cf_variable)
                (cf_tag_end))
              (cf_if_end
                (cf_tag_close)
                (cf_if_keyword))))
          (cf_tag
            (cf_set
              (cf_variable)
              (cf_assignment)
              (cf_variable)
              (cf_associative
                (cf_variable))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_function_call
                (cf_variable)
                (cf_assignment)
                (cf_variable)
                (cf_parens
                  (cf_variable)))
              (cf_period)
              (cf_variable)
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_function_call
                (cf_variable)
                (cf_assignment)
                (cf_variable)
                (cf_parens
                  (cf_variable)))
              (cf_associative
                (cf_variable))
              (cf_tag_selfclose_end)))
          (cf_tag_close)
          (cf_function_keyword)
          (cf_tag_end))))

===================================
function call
===================================

<cfset test = fn("test")["test"]>
---

(fragment
      (cf_tag
        (cf_set
          (cf_function_call
            (cf_variable)
            (cf_assignment)
            (cf_variable)
            (cf_parens
              (cf_dblquotes
                (cf_variable))))
                (cf_associative
            (cf_dblquotes
              (cf_variable)))
          (cf_tag_selfclose_end))))

===================================
get results
===================================
<cffunction name="getResults" output="false" returntype="struct" access="public">
    <cfargument name="id" type="any" required="true">

    <cfset var user = StructNew()>
    <cfset var result = VARIABLES.service.getResults(id=ARGUMENTS.id)>

    <cfset result = "#children[k]#">
    
    <cfset result = "#result.children[k].children[i].childid#">

    <cfset user.setChild(child={"childId":childId})>

    <div></div>

    <!--- Comment --->

    <cfif (true) OR ((true) AND (true))>

    </cfif>

    <cfset test = (test) />

    <cfset result.filter(function(){
        result = "Test";
        return result;
    }) />

    <cfreturn result />
</cffunction>


---

(fragment
      (cf_tag
        (cf_function_tag
          (cf_function_keyword)
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (cf_variable)))
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (cf_false)))
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (cf_variable)))
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (cf_variable)))
          (cf_tag_end)
          (cf_tag
            (cf_argument_tag
              (cf_argument_keyword)
              (cf_attribute
                (cf_attribute_name)
                (cf_dblquotes
                  (cf_variable)))
              (cf_attribute
                (cf_attribute_name)
                (cf_dblquotes
                  (cf_variable)))
              (cf_attribute
                (cf_attribute_name)
                (cf_dblquotes
                  (cf_true)))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_var)
              (cf_function_call
                (cf_variable)
                (cf_assignment)
                (cf_variable)
                (cf_parens))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_var)
              (cf_function_call
                (cf_variable)
                (cf_assignment)
                (cf_variable)
                (cf_period)
                (cf_variable)
                (cf_period)
                (cf_variable)
                (cf_parens
                  (cf_variable)
                  (cf_assignment)
                  (cf_variable)
                  (cf_period)
                  (cf_variable)))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (cf_hash
                  (cf_variable)
                  (cf_associative
                    (cf_variable))))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (cf_hash
                  (cf_variable)
                  (cf_period)
                  (cf_variable)
                  (cf_associative
                    (cf_variable))
                  (cf_period)
                  (cf_variable)
                  (cf_associative
                    (cf_variable))
                  (cf_period)
                  (cf_variable)))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_function_call
                (cf_variable)
                (cf_period)
                (cf_variable)
                (cf_parens
                  (cf_variable)
                  (cf_assignment)
                  (cf_bracket_expression
                    (cf_dblquotes
                      (cf_variable))
                    (cf_variable))))
              (cf_tag_selfclose_end)))
          (element
            (start_tag
              (tag_name))
            (end_tag
              (tag_name)))
          (comment)
          (cf_tag
            (cf_ifstatement
              (cf_if
                (cf_if_keyword)
                (cf_parens
                  (cf_true))
                (cf_operator)
                (cf_parens
                  (cf_parens
                    (cf_true))
                  (cf_operator)
                  (cf_parens
                    (cf_true)))
                (cf_tag_end))
              (cf_if_end
                (cf_tag_close)
                (cf_if_keyword))))
          (cf_tag
            (cf_set
              (cf_variable)
              (cf_assignment)
              (cf_parens
                (cf_variable))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_set
              (cf_function_call
                (cf_variable)
                (cf_period)
                (cf_variable)
                (cf_parens
                  (cf_function
                    (cf_function_keyword)
                    (cf_function_arguments)
                    (cf_bracket_function
                      (expression_statement
                        (cf_variable)
                        (cf_assignment)
                        (cf_dblquotes
                          (cf_variable)))
                      (cf_return
                        (cf_return_keyword)
                        (cf_variable))))))
              (cf_tag_selfclose_end)))
          (cf_tag
            (cf_return_tag
              (cf_return_keyword)
              (cf_variable)
              (cf_tag_selfclose_end)))
          (cf_tag_close)
          (cf_function_keyword)
          (cf_tag_end))))
     
===================================
script function
===================================
public boolean function myFunction(required any myArgument=""){
  return true; 
}

public function myFunction(required any myArgument={}){
  return true; 
}

function myFunction(required any myArgument=[]){
  return true; 
}
---
(fragment
      (cf_function
        (cf_function_access)
        (cf_function_returntype)
        (cf_function_keyword)
        (cf_function_name
          (text))
        (cf_function_arguments
          (cf_function_argument_required)
          (cf_function_argument_type)
          (cf_function_argument_name
            (text))
          (cf_dblquotes_empty))
        (cf_bracket_function
          (cf_return
            (cf_return_keyword)
            (cf_true))))
      (cf_function
        (cf_function_access)
        (cf_function_keyword)
        (cf_function_name
          (text))
        (cf_function_arguments
          (cf_function_argument_required)
          (cf_function_argument_type)
          (cf_function_argument_name
            (text))
          (cf_bracket_expression))
        (cf_bracket_function
          (cf_return
            (cf_return_keyword)
            (cf_true))))
      (cf_function
        (cf_function_keyword)
        (cf_function_name
          (text))
        (cf_function_arguments
          (cf_function_argument_required)
          (cf_function_argument_type)
          (cf_function_argument_name
            (text))
          (cf_associative))
        (cf_bracket_function
          (cf_return
            (cf_return_keyword)
            (cf_true)))))