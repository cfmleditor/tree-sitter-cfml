===================================
cfif
===================================
<cfif z EQ b>
    test
</cfif>
---

(program
      (cf_if_tag
        (binary_expression
          (identifier)
          (identifier))
        (text)))

===================================
cfif with else
===================================
<cfif z EQ b>Yes<cfelse>Noo</cfif>
---
(program
      (cf_if_tag
        (binary_expression
          (identifier)
          (identifier))
        (text)
        (cf_else_tag
          (text))))

===================================
cfif with elseif
===================================
<cfif z EQ b>Yes<cfelseif z EQ b>No</cfif>
---

 (program
      (cf_if_tag
        (binary_expression
          (identifier)
          (identifier))
        (text)
        (cf_elseif_tag
          (binary_expression
            (identifier)
            (identifier))
          (text))))


===================================
cfif with elseif and else
===================================
<cfif z EQ b>Yes<cfelseif z EQ b>No<cfelse>No</cfif>
---

(program
      (cf_if_tag
        (binary_expression
          (identifier)
          (identifier))
        (text)
        (cf_elseif_tag
          (binary_expression
            (identifier)
            (identifier))
          (text)
          (cf_selfclose_tag
            (cf_selfclose_tag_end))
          (text))))

===================================
cffunction
===================================

<cffunction name="Test">

    #testAND AND ANDtestOR#

    #test AND test#

    <cfset test = "test">

    <cfif test.test EQ test>

    </cfif>

    <cfset test = test[test]>
    <cfset test = test(test).test>
    <cfset test = test(test)[test]>

</cffunction>

---
(program
      (cf_function
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (hash_expression
          (binary_expression
            (identifier)
            (identifier)))
        (hash_expression
          (binary_expression
            (identifier)
            (identifier)))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (string
              (string_fragment)))
          (cf_selfclose_tag_end))
        (cf_if_tag
          (binary_expression
            (member_expression
              (identifier)
              (property_identifier))
            (identifier)))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (subscript_expression
              (identifier)
              (identifier)))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (member_expression
              (call_expression
                (identifier)
                (arguments
                  (identifier)))
              (property_identifier)))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (subscript_expression
              (call_expression
                (identifier)
                (arguments
                  (identifier)))
              (identifier)))
          (cf_selfclose_tag_end))))


===================================
function call
===================================

<cfset test = fn("test")["test"]>
---

(program
      (cf_set_tag
        (assignment_expression
          (identifier)
          (subscript_expression
            (call_expression
              (identifier)
              (arguments
                (string
                  (string_fragment))))
            (string
              (string_fragment))))
        (cf_selfclose_tag_end)))

===================================
get results
===================================
<cffunction name="getResults" output="false" returntype="struct" access="public">
    <cfargument name="id" type="any" required="true">

    <cfset var user = StructNew()>
    <cfset var result = VARIABLES.service.getResults(id=ARGUMENTS.id)>

    <cfset result = "#children[k]#">
    
    <cfset result = "#result.children[k].children[i].childid#">

    <cfset user.setChild(child={"childId":childId})>

    <div></div>

    <!--- Comment --->

    <cfif (true) OR ((true) AND (true))>

    </cfif>

    <cfset test = (test)>

    <cfset result.filter(function(){
        result = "Test";
        return result;
    })>

    <cfreturn result />
</cffunction>


---
(program
      (cf_function
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (cf_argument
          (cf_attribute
            (cf_attribute_name)
            (string
              (string_fragment)))
          (cf_attribute
            (cf_attribute_name)
            (string
              (string_fragment)))
          (cf_attribute
            (cf_attribute_name)
            (string
              (string_fragment)))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (cf_var)
          (assignment_expression
            (identifier)
            (call_expression
              (identifier)
              (arguments)))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (cf_var)
          (assignment_expression
            (identifier)
            (call_expression
              (member_expression
                (member_expression
                  (identifier)
                  (property_identifier))
                (property_identifier))
              (arguments
                (assignment_expression
                  (identifier)
                  (member_expression
                    (identifier)
                    (property_identifier))))))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (string
              (hash_expression
                (subscript_expression
                  (identifier)
                  (identifier)))))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (string
              (hash_expression
                (member_expression
                  (subscript_expression
                    (member_expression
                      (subscript_expression
                        (member_expression
                          (identifier)
                          (property_identifier))
                        (identifier))
                      (property_identifier))
                    (identifier))
                  (property_identifier)))))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (call_expression
            (member_expression
              (identifier)
              (property_identifier))
            (arguments
              (assignment_expression
                (identifier)
                (object
                  (pair
                    (string
                      (string_fragment))
                    (identifier))))))
          (cf_selfclose_tag_end))
        (element
          (self_closing_tag
            (tag_name)))
        (end_tag
          (tag_name))
        (cf_comment)
        (cf_if_tag
          (binary_expression
            (parenthesized_expression
              (true))
            (parenthesized_expression
              (binary_expression
                (parenthesized_expression
                  (true))
                (parenthesized_expression
                  (true))))))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (parenthesized_expression
              (identifier)))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (call_expression
            (member_expression
              (identifier)
              (property_identifier))
            (arguments
              (function_expression
                (formal_parameters)
                (statement_block
                  (expression_statement
                    (assignment_expression
                      (identifier)
                      (string
                        (string_fragment))))
                  (return_statement
                    (identifier))))))
          (cf_selfclose_tag_end))
        (cf_return
          (identifier)
          (cf_selfclose_tag_end))))
     
===================================
cfscript
===================================
<cfscript>

  cars = fn("abc,test","abc");

  cars = fn(test="abc",abc="test",abc);

  cars = fn["Test"](test="abc",abc="test");

  test().test();

</cfscript>
---
(program
      (cf_script
        (expression_statement
          (assignment_expression
            (identifier)
            (call_expression
              (identifier)
              (arguments
                (string
                  (string_fragment))
                (string
                  (string_fragment))))))
        (expression_statement
          (assignment_expression
            (identifier)
            (call_expression
              (identifier)
              (arguments
                (assignment_expression
                  (identifier)
                  (string
                    (string_fragment)))
                (assignment_expression
                  (identifier)
                  (string
                    (string_fragment)))
                (identifier)))))
        (expression_statement
          (assignment_expression
            (identifier)
            (call_expression
              (subscript_expression
                (identifier)
                (string
                  (string_fragment)))
              (arguments
                (assignment_expression
                  (identifier)
                  (string
                    (string_fragment)))
                (assignment_expression
                  (identifier)
                  (string
                    (string_fragment)))))))
        (expression_statement
          (call_expression
            (member_expression
              (call_expression
                (identifier)
                (arguments))
              (property_identifier))
            (arguments)))))


===================================
nested cfif
===================================

<cfif (true)>
  
  test
  
  <cfif (true AND true)>
      test
  </cfif>
  
  #test# 

  ##

</cfif>

---
(program
      (cf_if_tag
        (parenthesized_expression
          (true))
        (text)
        (cf_if_tag
          (parenthesized_expression
            (binary_expression
              (true)
              (true)))
          (text))
        (hash_expression
          (identifier))
        (hash_empty)))

===================================
/ Characters used in tags and nested cfml comments
===================================

<div style="/"></div>

<cfif (true / true)>
    test
</cfif>

<cfset temp = 1 / 1 />

<!--- 

  <!--- --->

--->
---

(program
      (element
        (start_tag
          (tag_name)
          (tag_attributes
            (attribute
              (attribute_name)
              (quoted_attribute_value
                (attribute_value)))))
        (end_tag
          (tag_name)))
      (cf_if_tag
        (parenthesized_expression
          (binary_expression
            (true)
            (true)))
        (text))
      (cf_set_tag
        (assignment_expression
          (identifier)
          (binary_expression
            (number)
            (number)))
        (cf_selfclose_tag_end))
      (cf_comment))


===================================
cfscript comments
===================================
<cfscript>
    // test
    test(); // test

    if ( test EQ test ) {
       test();
    }
    /* test */
</cfscript>
---

(program
      (cf_script
        (comment)
        (expression_statement
          (call_expression
            (identifier)
            (arguments)))
        (comment)
        (if_statement
          (parenthesized_expression
            (binary_expression
              (identifier)
              (identifier)))
          (statement_block
            (expression_statement
              (call_expression
                (identifier)
                (arguments)))))
        (comment)))

===================================
cfscript switch
===================================

<cfscript>
  // test
  switch (test) {
    case "1":
      test();//test
      
      break;
    default: //test
      test();
  }
</cfscript>

<cfdirectory />
---

(program
      (cf_script
        (comment)
        (switch_statement
          (parenthesized_expression
            (identifier))
          (switch_body
            (switch_case
              (string
                (string_fragment))
              (expression_statement
                (call_expression
                  (identifier)
                  (arguments)))
              (comment)
              (break_statement))
            (switch_default
              (comment)
              (expression_statement
                (call_expression
                  (identifier)
                  (arguments)))))))
      (cf_selfclose_tag
        (cf_selfclose_tag_end)))


===================================
testing
===================================
<cfquery name="qry">
    SELECT foo
    FROM bar
    WHERE foobar = <cfqueryparam cfsqltype="cf_sql_char" value="#ARGUMENTS.footbar#">
</cfquery>
<!--- test --->
<script>
    // test
</script>
<cfset "variables.#functions[i].name#" = evaluate("decorator.#functions[i].name#") />


<cfscript>
  try {

  } catch (any e) {
    
  }
</cfscript>

<strong>#Replace(arguments.ErrorCollection.Message,"::","<br />")#</strong> <br />


<table class="tagcontext">
						<cfloop from="1" to="#ArrayLen(arguments.ErrorCollection.TagContext)#" index="i">
							<cfset template = arguments.ErrorCollection.TagContext[i].template />
							<cfset line = arguments.ErrorCollection.TagContext[i].line />
							<tr>
								<td>
									<cfif structKeyExists(arguments.ErrorCollection.TagContext[i], "codePrintHTML") AND i eq 1>#arguments.ErrorCollection.TagContext[i].codePrintHTML#</cfif>
								</td>
							</tr>
						</cfloop>
					</table>
---
(program
      (cf_query
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment))))
      (cf_comment)
      (script_element
        (start_tag
          (tag_name))
        (raw_text)
        (end_tag
          (tag_name)))
      (cf_set_tag
        (assignment_expression
          (string
            (string_fragment)
            (hash_expression
              (member_expression
                (subscript_expression
                  (identifier)
                  (identifier))
                (property_identifier))))
          (call_expression
            (identifier)
            (arguments
              (string
                (string_fragment)
                (hash_expression
                  (member_expression
                    (subscript_expression
                      (identifier)
                      (identifier))
                    (property_identifier)))))))
        (cf_selfclose_tag_end))
      (cf_script
        (try_statement
          (statement_block)
          (catch_clause
            (identifier)
            (identifier)
            (statement_block))))
      (element
        (self_closing_tag
          (tag_name)))
      (hash_expression
        (call_expression
          (identifier)
          (arguments
            (member_expression
              (member_expression
                (identifier)
                (property_identifier))
              (property_identifier))
            (string
              (string_fragment))
            (string
              (string_fragment)))))
      (end_tag
        (tag_name))
      (element
        (self_closing_tag
          (tag_name)))
      (element
        (self_closing_tag
          (tag_name)
          (tag_attributes
            (attribute
              (attribute_name)
              (quoted_attribute_value
                (attribute_value))))))
      (cf_loop
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (cf_attribute
          (cf_attribute_name)
          (string
            (hash_expression
              (call_expression
                (identifier)
                (arguments
                  (member_expression
                    (member_expression
                      (identifier)
                      (property_identifier))
                    (property_identifier)))))))
        (cf_attribute
          (cf_attribute_name)
          (string
            (string_fragment)))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (member_expression
              (subscript_expression
                (member_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (property_identifier))
                (identifier))
              (property_identifier)))
          (cf_selfclose_tag_end))
        (cf_set_tag
          (assignment_expression
            (identifier)
            (member_expression
              (subscript_expression
                (member_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (property_identifier))
                (identifier))
              (property_identifier)))
          (cf_selfclose_tag_end))
        (element
          (self_closing_tag
            (tag_name)))
        (element
          (self_closing_tag
            (tag_name)))
        (cf_if_tag
          (binary_expression
            (call_expression
              (identifier)
              (arguments
                (subscript_expression
                  (member_expression
                    (member_expression
                      (identifier)
                      (property_identifier))
                    (property_identifier))
                  (identifier))
                (string
                  (string_fragment))))
            (binary_expression
              (identifier)
              (number)))
          (hash_expression
            (member_expression
              (subscript_expression
                (member_expression
                  (member_expression
                    (identifier)
                    (property_identifier))
                  (property_identifier))
                (identifier))
              (property_identifier))))
        (end_tag
          (tag_name))
        (end_tag
          (tag_name)))
      (end_tag
        (tag_name)))
===================================
testing2
===================================

<cfif true>
  <br />
</cfif>

      <cfif classname neq ''>
									</tbody>
								</table>
                </table>
							</cfif>

---
(program
      (cf_if_tag
        (true)
        (element
          (self_closing_tag
            (tag_name))))
      (cf_if_tag
        (binary_expression
          (identifier)
          (string))
        (erroneous_end_tag
          (erroneous_end_tag_name))
        (erroneous_end_tag
          (erroneous_end_tag_name))
        (erroneous_end_tag
          (erroneous_end_tag_name))))

===================================
testing3
===================================
<cfset temp = "<cfif></cfif>" />
<cfset args.log_enable = compareNoCase(log_enable, "Y") EQ 0 ? true : false />
---
(program
      (cf_set_tag
        (assignment_expression
          (identifier)
          (string
            (string_fragment)))
          (cf_selfclose_tag_end))
      (cf_set_tag
        (assignment_expression
          (member_expression
            (identifier)
            (property_identifier))
          (ternary_expression
            (binary_expression
              (call_expression
                (identifier)
                (arguments
                  (identifier)
                  (string
                    (string_fragment))))
              (number))
            (true)
            (false)))
        (cf_selfclose_tag_end)))