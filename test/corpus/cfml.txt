===================================
cfif
===================================
<cfif z EQ b>
    test
</cfif>
---

(fragment
      (cf_if_statement_tag
        (cf_if_tag
          (cf_variable)
          (cf_operator)
          (cf_variable)
          (text))
        (cf_if_end_tag)))

===================================
cfif with else
===================================
<cfif z EQ b>Yes<cfelse>Noo</cfif>
---
(fragment
      (cf_if_statement_tag
        (cf_if_tag
          (cf_variable)
          (cf_operator)
          (cf_variable)
          (text))
        (cf_else_tag
          (text))
        (cf_if_end_tag)))

===================================
cfif with elseif
===================================
<cfif z EQ b>Yes<cfelseif z EQ b>No</cfif>
---

(fragment
      (cf_if_statement_tag
        (cf_if_tag
          (cf_variable)
          (cf_operator)
          (cf_variable)
          (text))
        (cf_elseif_tag
          (cf_variable)
          (cf_operator)
          (cf_variable)
          (text))
        (cf_if_end_tag)))


===================================
cfif with elseif and else
===================================
<cfif z EQ b>Yes<cfelseif z EQ b>No<cfelse>No</cfif>
---

(fragment
      (cf_if_statement_tag
        (cf_if_tag
          (cf_variable)
          (cf_operator)
          (cf_variable)
          (text))
        (cf_elseif_tag
          (cf_variable)
          (cf_operator)
          (cf_variable)
          (text))
        (cf_else_tag
          (text))
        (cf_if_end_tag)))

===================================
cffunction
===================================

<cffunction name="Test">

    #testAND AND ANDtestOR#

    #test AND test#

    <cfset test = "test">

    <cfif test.test EQ test>

    </cfif>

    <cfset test = test[test]>
    <cfset test = test(test).test>
    <cfset test = test(test)[test]>

</cffunction>

---
(fragment
      (cf_function
        (cf_attribute
          (cf_attribute_name)
          (cf_dblquotes
            (quoted_text)))
        (cf_hash
          (cf_variable)
          (cf_operator)
          (cf_variable))
        (cf_hash
          (cf_variable)
          (cf_operator)
          (cf_variable))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_dblquotes
            (quoted_text))
          (cf_tag_selfclose_end))
        (cf_if_statement_tag
          (cf_if_tag
            (cf_variable)
            (cf_period)
            (cf_variable)
            (cf_operator)
            (cf_variable))
          (cf_if_end_tag))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_variable)
          (cf_associative
            (cf_variable))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_variable)))
          (cf_period)
          (cf_variable)
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_variable)))
          (cf_associative
            (cf_variable))
          (cf_tag_selfclose_end))))


===================================
function call
===================================

<cfset test = fn("test")["test"]>
---

(fragment
      (cf_set_tag
        (cf_variable)
        (cf_assignment)
        (cf_function_call
          (cf_variable)
          (cf_function_call_arguments
            (cf_dblquotes
              (quoted_text))))
        (cf_associative
          (cf_dblquotes
            (quoted_text)))
        (cf_tag_selfclose_end)))

===================================
get results
===================================
<cffunction name="getResults" output="false" returntype="struct" access="public">
    <cfargument name="id" type="any" required="true">

    <cfset var user = StructNew()>
    <cfset var result = VARIABLES.service.getResults(id=ARGUMENTS.id)>

    <cfset result = "#children[k]#">
    
    <cfset result = "#result.children[k].children[i].childid#">

    <cfset user.setChild(child={"childId":childId})>

    <div></div>

    <!--- Comment --->

    <cfif (true) OR ((true) AND (true))>

    </cfif>

    <cfset test = (test)>

    <cfset result.filter(function(){
        result = "Test";
        return result;
    })>

    <cfreturn result />
</cffunction>


---
(fragment
      (cf_function
        (cf_attribute
          (cf_attribute_name)
          (cf_dblquotes
            (quoted_text)))
        (cf_attribute
          (cf_attribute_name)
          (cf_dblquotes
            (quoted_text)))
        (cf_attribute
          (cf_attribute_name)
          (cf_dblquotes
            (quoted_text)))
        (cf_attribute
          (cf_attribute_name)
          (cf_dblquotes
            (quoted_text)))
        (cf_argument
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (quoted_text)))
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (quoted_text)))
          (cf_attribute
            (cf_attribute_name)
            (cf_dblquotes
              (quoted_text)))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_var)
          (cf_variable)
          (cf_assignment)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_var)
          (cf_variable)
          (cf_assignment)
          (cf_variable)
          (cf_period)
          (cf_variable)
          (cf_period)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_variable)
              (cf_assignment)
              (cf_variable)
              (cf_period)
              (cf_variable)))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_dblquotes
            (quoted_text
              (cf_hash
                (cf_variable)
                (cf_associative
                  (cf_variable)))))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_dblquotes
            (quoted_text
              (cf_hash
                (cf_variable)
                (cf_period)
                (cf_variable)
                (cf_associative
                  (cf_variable))
                (cf_period)
                (cf_variable)
                (cf_associative
                  (cf_variable))
                (cf_period)
                (cf_variable))))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_variable)
          (cf_period)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_variable)
              (cf_assignment)
              (cf_bracket_expression
                (cf_dblquotes
                  (quoted_text))
                (cf_variable))))
          (cf_tag_selfclose_end))
        (element
          (start_tag
            (tag_name))
          (end_tag
            (tag_name)))
        (comment)
        (cf_if_statement_tag
          (cf_if_tag
            (cf_expression_parens
              (cf_true))
            (cf_operator)
            (cf_expression_parens
              (cf_expression_parens
                (cf_true))
              (cf_operator)
              (cf_expression_parens
                (cf_true))))
          (cf_if_end_tag))
        (cf_set_tag
          (cf_variable)
          (cf_assignment)
          (cf_expression_parens
            (cf_variable))
          (cf_tag_selfclose_end))
        (cf_set_tag
          (cf_variable)
          (cf_period)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_function
                (cf_function_keyword)
                (cf_function_arguments)
                (cf_bracket_function
                  (expression_statement
                    (cf_variable)
                    (cf_assignment)
                    (cf_dblquotes
                      (quoted_text)))
                  (cf_return
                    (cf_return_keyword)
                    (cf_variable))))))
          (cf_tag_selfclose_end))
        (cf_return
          (cf_variable)
          (cf_tag_selfclose_end))))
     
===================================
cfscript
===================================
<cfscript>
  public boolean function myFunction(required any myArgument=""){
    return true; 
  }

  public function myFunction(required any myArgument={}){
    return true; 
  }

  function myFunction(required any myArgument=[]){
    return true; 
  }

  cars = fn("abc,test","abc");

  cars = fn(test="abc",abc="test",abc);

  cars = fn["Test"](test="abc",abc="test");

  test().test();

</cfscript>
---
(fragment
      (cf_script
        (cf_script_expression
          (cf_function
            (cf_function_access)
            (cf_function_returntype)
            (cf_function_keyword)
            (cf_function_name
              (cf_variable))
            (cf_function_arguments
              (cf_function_argument_required)
              (cf_function_argument_type)
              (cf_function_argument_name
                (cf_variable))
              (cf_dblquotes))
            (cf_bracket_function
              (cf_return
                (cf_return_keyword)
                (cf_true)))))
        (cf_script_expression
          (cf_function
            (cf_function_access)
            (cf_function_keyword)
            (cf_function_name
              (cf_variable))
            (cf_function_arguments
              (cf_function_argument_required)
              (cf_function_argument_type)
              (cf_function_argument_name
                (cf_variable))
              (cf_bracket_expression))
            (cf_bracket_function
              (cf_return
                (cf_return_keyword)
                (cf_true)))))
        (cf_script_expression
          (cf_function
            (cf_function_keyword)
            (cf_function_name
              (cf_variable))
            (cf_function_arguments
              (cf_function_argument_required)
              (cf_function_argument_type)
              (cf_function_argument_name
                (cf_variable))
              (cf_associative))
            (cf_bracket_function
              (cf_return
                (cf_return_keyword)
                (cf_true)))))
        (cf_script_expression
          (cf_variable)
          (cf_assignment)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_dblquotes
                (quoted_text))
              (cf_comma)
              (cf_dblquotes
                (quoted_text)))))
        (cf_script_expression
          (cf_variable)
          (cf_assignment)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (quoted_text))
              (cf_comma)
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (quoted_text))
              (cf_comma)
              (cf_variable))))
        (cf_script_expression
          (cf_variable)
          (cf_assignment)
          (cf_function_call
            (cf_variable)
            (cf_associative
              (cf_dblquotes
                (quoted_text)))
            (cf_function_call_arguments
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (quoted_text))
              (cf_comma)
              (cf_variable)
              (cf_assignment)
              (cf_dblquotes
                (quoted_text)))))
        (cf_script_expression
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments))
          (cf_period)
          (cf_function_call
            (cf_variable)
            (cf_function_call_arguments)))))


===================================
nested cfif
===================================

<cfif (true)>
  
  test
  
  <cfif (true AND true)>
      test
  </cfif>
  
  #test# 

  ##

</cfif>

---

(fragment
  (cf_if_statement_tag
    (cf_if_tag
      (cf_expression_parens
        (cf_true))
      (text)
      (cf_if_statement_tag
        (cf_if_tag
          (cf_expression_parens
            (cf_true)
            (cf_operator)
            (cf_true))
          (text))
        (cf_if_end_tag))
      (cf_hash
        (cf_variable))
      (cf_hash_empty))
    (cf_if_end_tag)))



===================================
/ Characters used in tags
===================================

<div style="/"></div>

<cfif (true / true)>
    test
</cfif>

<cfset temp = 1 / 1 />

---

(fragment
  (element
    (start_tag
      (tag_name)
      (attribute
        (attribute_name)
        (quoted_attribute_value
          (attribute_value))))
    (end_tag
      (tag_name)))
  (cf_if_statement_tag
    (cf_if_tag
      (cf_expression_parens
        (cf_true)
        (cf_operator)
        (cf_true))
      (text))
    (cf_if_end_tag))
      (cf_set_tag
        (cf_variable)
        (cf_assignment)
        (cf_variable)
        (cf_operator)
        (cf_variable)
        (cf_tag_selfclose_end)))