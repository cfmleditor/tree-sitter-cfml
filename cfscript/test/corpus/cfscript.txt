===================================
cfscript comments
===================================
    // test
    test(); // test

    if ( test EQ test ) {
       test();
    }
    /* test */
---

(program
      (comment)
      (expression_statement
        (call_expression
          (identifier)
          (arguments)))
      (comment)
      (if_statement
        (parenthesized_expression
          (binary_expression
            (identifier)
            (identifier)))
        (statement_block
          (expression_statement
            (call_expression
              (identifier)
              (arguments)))))
      (comment))

===================================
cfscript
===================================
  cars = fn("abc,test","abc");

  cars = fn(test="#abc#",abc="test",abc);

  cars = fn["Test"](test="abc",abc="test");

  test().test();

  x = 2;
  y = "#x#";
  z = #y#;

  writeDump([x, y, z]);

---
(program
      (expression_statement
        (assignment_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments
              (string
                (string_fragment))
              (string
                (string_fragment))))))
      (expression_statement
        (assignment_expression
          (identifier)
          (call_expression
            (identifier)
            (arguments
              (assignment_expression
                (identifier)
                (string
                  (hash_expression
                    (identifier))))
              (assignment_expression
                (identifier)
                (string
                  (string_fragment)))
              (identifier)))))
      (expression_statement
        (assignment_expression
          (identifier)
          (call_expression
            (subscript_expression
              (identifier)
              (string
                (string_fragment)))
            (arguments
              (assignment_expression
                (identifier)
                (string
                  (string_fragment)))
              (assignment_expression
                (identifier)
                (string
                  (string_fragment)))))))
      (expression_statement
        (call_expression
          (member_expression
            (call_expression
              (identifier)
              (arguments))
            (property_identifier))
          (arguments)))
      (expression_statement
        (assignment_expression
          (identifier)
          (number)))
      (expression_statement
        (assignment_expression
          (identifier)
          (string
            (hash_expression
              (identifier)))))
      (expression_statement
        (assignment_expression
          (identifier)
          (hash_expression
            (identifier))))
      (expression_statement
        (call_expression
          (identifier)
          (arguments
            (array
              (identifier)
              (identifier)
              (identifier))))))


===================================
cfscript switch
===================================
  // test
  switch (test) {
    case "1":
      test();//test
      
      break;
    default: //test
      test();
  }
---
(program
      (comment)
      (switch_statement
        (parenthesized_expression
          (identifier))
        (switch_body
          (switch_case
            (string
              (string_fragment))
            (expression_statement
              (call_expression
                (identifier)
                (arguments)))
            (comment)
            (break_statement))
          (switch_default
            (comment)
            (expression_statement
              (call_expression
                (identifier)
                (arguments)))))))


===================================
cfscript function 1
===================================
public string function doThing() 
{

}
---
(program
      (function_declaration
        (function_access)
        (return_type)
        (identifier)
        (formal_parameters)
        (statement_block)))

===================================
cfscript function 2
===================================
public string function doThing(string firstName = "blah",required string firstName,string firstName)
{

}
---
(program
  (function_declaration
    (function_access)
    (return_type)
    (identifier)
    (formal_parameters
      (parameter_type)
      (assignment_pattern
        (identifier)
        (string
          (string_fragment)))
      (parameter_type)
      (identifier)
      (parameter_type)
      (identifier))
    (statement_block)))

===================================
cfscript function 3
===================================
public function function doThing(string firstName = "blah",required function firstName,string firstName)
{

}
---
(program
      (function_declaration
        (function_access)
        (return_type)
        (identifier)
        (formal_parameters
          (parameter_type)
          (assignment_pattern
            (identifier)
            (string
              (string_fragment)))
          (parameter_type)
          (identifier)
          (parameter_type)
          (identifier))
        (statement_block)))

===================================
script tag
===================================
cfmail(test=test){

};
---
(program
  (tag_statement
    (identifier)
    (arguments
      (assignment_expression
        (identifier)
        (identifier)))
    (statement_block)))

===================================
component
===================================
component test:displayLabel="${test} ${test}" singleton {
    public function printTest() {
        static['key'] = 'newValue';
    }
}
---
(program
      (expression_statement
        (component
          (assignment_expression
            (member_expression
              (identifier)
              (property_identifier))
            (string
              (string_fragment)))
          (identifier)
          (component_body
            (function_declaration
              (function_access)
              (identifier)
              (formal_parameters)
              (statement_block
                (expression_statement
                  (assignment_expression
                    (subscript_expression
                      (identifier)
                      (string
                        (string_fragment)))
                    (string
                      (string_fragment))))))))))

===================================
component test
===================================
import SETTINGS;

component {
	boolean function hasTest(required com.someCompany.SomeObject myObj) {
    	var tests = queryExecute(
        	  "
                SELECT testId
                FROM Tests
                WHERE userId = :userId AND testDate IS NOT NULL;
            ",
            { userId: { cfsqltype: "integer", value: myObject.getUserId() } }
    	  );

        return tests.recordCount;
    }
}

try {
			assertTrue(isNull(null));
		
			var x=null;
			assertTrue(isNull(x));
		}
		finally {
			application action="update" NULLSupport=ns;
		}
    
---
(program
      (import_statement
        (identifier))
      (expression_statement
        (component
          (component_body
            (function_declaration
              (return_type)
              (identifier)
              (formal_parameters
                (parameter_type
                  (path
                    (identifier)
                    (identifier)
                    (identifier)))
                (identifier))
              (statement_block
                (variable_declaration
                  (variable_declarator
                    (identifier)
                    (query_expression
                      (query_text)
                      (object
                        (pair
                          (property_identifier)
                          (object
                            (pair
                              (property_identifier)
                              (string
                                (string_fragment)))
                            (pair
                              (property_identifier)
                              (call_expression
                                (member_expression
                                  (identifier)
                                  (property_identifier))
                                (arguments)))))))))
                (return_statement
                  (member_expression
                    (identifier)
                    (property_identifier))))))))
      (try_statement
        (statement_block
          (expression_statement
            (call_expression
              (identifier)
              (arguments
                (call_expression
                  (identifier)
                  (arguments
                    (null))))))
          (variable_declaration
            (variable_declarator
              (identifier)
              (null)))
          (expression_statement
            (call_expression
              (identifier)
              (arguments
                (call_expression
                  (identifier)
                  (arguments
                    (identifier)))))))
        (finally_clause
          (statement_block
            (tag_statement
              (identifier)
              (assignment_expression
                (identifier)
                (string
                  (string_fragment)))
              (assignment_expression
                (identifier)
                (identifier)))))))